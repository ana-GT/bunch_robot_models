#!/usr/bin/env python
from sensor_link.sensor_reader import SensorReader
import rospy
import rospkg
import xacro
import os
import sys
import json


class ModelGenerator(object):
    def __init__(self, use_timer=True):
        self.use_timer = use_timer
        self.rospack = rospkg.RosPack()
        self.sensor = SensorReader(False)

    def request_for_t_position(self):
        while not rospy.is_shutdown():
            if self.use_timer:
                rospy.sleep(5)
                os.system('beep')
            else:
                raw_input("User in T position, press <Enter> when ready...")
            if self.sensor.calibrate():
                rospy.loginfo("T pose recorded successfully")
                break
            else:
                rospy.logerr("Cannot calibrate, skeleton not visible")
        # create tmp folder if it does not exist
        tmp_dir = self.rospack.get_path("human_moveit_config") + '/tmp/'
        if not os.path.isdir(tmp_dir):
            os.makedirs(tmp_dir)
        # save the recorded T pose
        filename = tmp_dir + 'skeleton.json'
        with open(filename, 'w') as output_file:
            json.dump(self.sensor.skeletons, output_file, sort_keys=True, indent=4)

    def create_urdf(self, output_param='/human_description'):
        str_lengths = {k: str(v) for k, v in self.sensor.lengths.iteritems()}
        xacro.set_substitution_args_context(str_lengths)

        with open(self.rospack.get_path("human_moveit_config") + "/urdf/xacro/human_skeleton.urdf.xacro") as f:
            document = xacro.parse(f)

        xacro.process_includes(document, self.rospack.get_path("human_moveit_config") + "/urdf/xacro")
        xacro.eval_self_contained(document)

        rospy.set_param(output_param, document.toprettyxml(indent='  '))

        # save the model under tmp folder
        output_filename = self.rospack.get_path("human_moveit_config") + "/tmp/human.urdf"
        with open(output_filename, 'w') as f:
            f.write(document.toprettyxml(indent='  '))
        # also overwrite current human model for moveit
        urdf_file = '/urdf/human.urdf'
        output_urdf = self.rospack.get_path("human_moveit_config") + urdf_file
        with open(output_urdf, 'w') as f:
            f.write(document.toprettyxml(indent='  '))

    def create_calibration_matrices(self):
        # for all the recorded skeletons calibrate the transformation matrices
        dict_calibr = {}
        for key, value in self.sensor.skeletons.iteritems():
            if value:
                dict_calibr[key] = self.sensor_calibr.calibrate(value)
        print dict_calibr


if __name__ == '__main__':
    rospy.init_node('model_generator')
    generator = ModelGenerator(sys.argv[1] == 'True')
    # record skeleton data
    generator.request_for_t_position()
    # create URDF file
    generator.create_urdf()
